// Code generated by MockGen. DO NOT EDIT.
// Source: webhook.go
//
// Generated by this command:
//
//	mockgen -source=webhook.go -destination=./mocks/webhook_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	models "webhook-tester/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockWebhookRepository is a mock of WebhookRepository interface.
type MockWebhookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookRepositoryMockRecorder
	isgomock struct{}
}

// MockWebhookRepositoryMockRecorder is the mock recorder for MockWebhookRepository.
type MockWebhookRepositoryMockRecorder struct {
	mock *MockWebhookRepository
}

// NewMockWebhookRepository creates a new mock instance.
func NewMockWebhookRepository(ctrl *gomock.Controller) *MockWebhookRepository {
	mock := &MockWebhookRepository{ctrl: ctrl}
	mock.recorder = &MockWebhookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookRepository) EXPECT() *MockWebhookRepositoryMockRecorder {
	return m.recorder
}

// CleanPublic mocks base method.
func (m *MockWebhookRepository) CleanPublic(d time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanPublic", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanPublic indicates an expected call of CleanPublic.
func (mr *MockWebhookRepositoryMockRecorder) CleanPublic(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanPublic", reflect.TypeOf((*MockWebhookRepository)(nil).CleanPublic), d)
}

// Delete mocks base method.
func (m *MockWebhookRepository) Delete(id string, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWebhookRepositoryMockRecorder) Delete(id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWebhookRepository)(nil).Delete), id, userID)
}

// Get mocks base method.
func (m *MockWebhookRepository) Get(id string) (*models.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWebhookRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWebhookRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockWebhookRepository) GetAll() ([]models.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockWebhookRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWebhookRepository)(nil).GetAll))
}

// GetAllByUser mocks base method.
func (m *MockWebhookRepository) GetAllByUser(userID uint) ([]models.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUser", userID)
	ret0, _ := ret[0].([]models.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUser indicates an expected call of GetAllByUser.
func (mr *MockWebhookRepositoryMockRecorder) GetAllByUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUser", reflect.TypeOf((*MockWebhookRepository)(nil).GetAllByUser), userID)
}

// GetByUser mocks base method.
func (m *MockWebhookRepository) GetByUser(id string, userID uint) (*models.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", id, userID)
	ret0, _ := ret[0].(*models.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockWebhookRepositoryMockRecorder) GetByUser(id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockWebhookRepository)(nil).GetByUser), id, userID)
}

// GetWithRequests mocks base method.
func (m *MockWebhookRepository) GetWithRequests(id string) (*models.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithRequests", id)
	ret0, _ := ret[0].(*models.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithRequests indicates an expected call of GetWithRequests.
func (mr *MockWebhookRepositoryMockRecorder) GetWithRequests(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithRequests", reflect.TypeOf((*MockWebhookRepository)(nil).GetWithRequests), id)
}

// Insert mocks base method.
func (m *MockWebhookRepository) Insert(webhook *models.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockWebhookRepositoryMockRecorder) Insert(webhook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWebhookRepository)(nil).Insert), webhook)
}

// InsertRequest mocks base method.
func (m *MockWebhookRepository) InsertRequest(wr *models.WebhookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRequest", wr)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRequest indicates an expected call of InsertRequest.
func (mr *MockWebhookRepositoryMockRecorder) InsertRequest(wr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRequest", reflect.TypeOf((*MockWebhookRepository)(nil).InsertRequest), wr)
}

// Update mocks base method.
func (m *MockWebhookRepository) Update(webhook *models.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWebhookRepositoryMockRecorder) Update(webhook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWebhookRepository)(nil).Update), webhook)
}
